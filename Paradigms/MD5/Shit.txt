//    static String str = "abcd";
    static int a = 0x67452301;
    static int b = 0xefcdab89;
    static int c = 0x98badcfe;
    static int d = 0x10325476;
    static int[] k = {0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501, 0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821, 0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8, 0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a, 0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70, 0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665, 0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1, 0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391};
    static int[] s = {7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21};

    /*static String shift(String str) {
        StringBuilder temp = new StringBuilder(str.charAt(str.length() - 1)).append(str.substring(0, str.length() - 1));
        return temp.toString();
    }*/

    static StringBuilder addition(StringBuilder sb) {
        int len = sb.length();
        sb.append("1");
        do {
            sb.append("0");
        } while (sb.length() % 512 != 448);
        for (int i = 0; i < 64 - Integer.toBinaryString(len).length(); i++) {
            sb.append("0");
        }
        String temp = Integer.toBinaryString(len);
        sb.append(Integer.toBinaryString(len));
        return sb;
    }

    static int function(int i, int b, int c, int d) {
        int f;
        if (i < 16) {
            f = (b & c) | ((~b) & d);
        } else if (i < 32) {
            f = (b & d) | ((~d) & c);
        } else if (i < 48) {
            f = b ^ c ^ d;
        } else {
            f = c ^ (b | (~d));
        }
        return f;
    }

    /*static int index(int i) {
        int g;
        if (i < 16) {
            g = i;
        } else if (i < 32) {
            g = (5 * i + 1) % 16;
        } else if (i < 48) {
            g = (3 * i + 5) % 16;
        } else {
            g = (7 * i) % 16;
        }
        return g;
    }*/

    /*public static void main(String[] args) throws UnsupportedEncodingException{
//        BufferedInputStream bus = new BufferedInputStream(System.in);
//        StringBuilder sb = new StringBuilder(args[0]);
        byte[] text = args[0].getBytes("utf-8");
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < text.length; i++) {
            sb.append(text[i]);
        }
        sb = addition(sb);
        int n = sb.length();
        int[] t = new int[64];
//        for (int i = 0; i < 64; i++) {
//            t[i] = (int) Math.floor((int) Math.pow(2, 32) * Math.abs(Math.sin(i + 1)));
//        }
        for (int i = 0; i < (sb.length() / 16); i++) {
//            byte m[] = new byte[16];
//            for (int j = 0; j < 16; j++) {
//                StringBuilder temp = new StringBuilder(sb.charAt(i * 16 + j));
//                m[j] = temp.toString().getBytes("utf-8");
//            }
            StringBuilder temp = new StringBuilder(sb.substring(i * 16, i * 16 + 16));
            byte[] m = temp.toString().getBytes("utf-8");
            int aa = a;
            int bb = b;
            int cc = c;
            int dd = d;
//            for (int j = 0; j < 64; j++) {
//                int f, g;
//                f = CalcMD5.function(i, bb, cc, dd);
//                g = CalcMD5.index(i);
//                f += aa + k[i] + m[g];
//                aa = dd;
//                dd = cc;
//                cc = bb;
//                bb += (f << s[i]);
//            }
//            a += aa;
//            b += bb;
//            c += cc;
//            d += dd;
            for (int j = 0; j < 64; j++) {
                if (j % 4 == 0) {
                    a = b + ((a + function(i, b, c, d) + m[j % 16] + k[j]) << s[i]);
                }else if (j % 4 == 1) {
                    d = a + ((d + function(i, a, b, c) + m[j % 16] + k[j]) << s[i]);
                }else if (j % 4 == 2) {
                    c = d + ((c + function(i, d, a, b) + m[j % 16] + k[j]) << s[i]);
                }else {
                    b = c + ((b + function(i, c, d, a) + m[j % 16] + k[j]) << s[i]);
                }
            }
            a += aa;
            b += bb;
            c += cc;
            d += dd;
        }
        StringBuilder answer = new StringBuilder(Integer.toHexString(d)).append(Integer.toHexString(c))
                .append(Integer.toHexString(b)).append(Integer.toHexString(a));
        System.out.println(answer);
    }*/